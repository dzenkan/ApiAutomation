{
  "stats": {
    "suites": 13,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-19T09:20:30.283Z",
    "end": "2023-10-19T09:21:19.963Z",
    "duration": 49680,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6ca0be41-3cf2-4e17-bfa1-1365836879ad",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2cf67ca2-9b16-4841-8e1f-f2fa782a420d",
          "title": "create user test",
          "fullFile": "/Users/testvagrant-1/Documents/api coding challenge/contactlist_apiautomation_assignment/test/user/createuser.spec.js",
          "file": "/test/user/createuser.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to add uuser succesfully ",
              "fullTitle": "create user test should be able to add uuser succesfully ",
              "timedOut": false,
              "duration": 2785,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  \n \n  const response = await axios.post(\n    baseUrl,\n    user\n  );\n    \n  token = response.data.token;\n \n  expect(response.data).to.not.be.empty;\n    expect(response.status).to.equal(201);\n} catch (error) {\n  console.error(error);\n}",
              "err": {},
              "uuid": "e6ba0f89-31fd-4ad5-9fc6-98d0325dfb5b",
              "parentUUID": "2cf67ca2-9b16-4841-8e1f-f2fa782a420d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "send authentication error for using same email ",
              "fullTitle": "create user test send authentication error for using same email ",
              "timedOut": false,
              "duration": 1217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n\n  const response = await axios.post(\n    baseUrl,\n    user\n  );\n    \n  token = response.data.token;\n\n} catch (error) {\n    expect(error.response.status).to.equal(400);\n    \n}",
              "err": {},
              "uuid": "61da9710-0257-44fd-aedc-2177b7ea18ce",
              "parentUUID": "2cf67ca2-9b16-4841-8e1f-f2fa782a420d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e6ba0f89-31fd-4ad5-9fc6-98d0325dfb5b",
            "61da9710-0257-44fd-aedc-2177b7ea18ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4002,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "92585d4b-477d-4340-a75e-14475c320362",
          "title": "delete user",
          "fullFile": "/Users/testvagrant-1/Documents/api coding challenge/contactlist_apiautomation_assignment/test/user/deleteuser.spec.js",
          "file": "/test/user/deleteuser.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Should login and get the bearer token in \"delete user\"",
              "fullTitle": "delete user \"before all\" hook: Should login and get the bearer token in \"delete user\"",
              "timedOut": false,
              "duration": 1228,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await userToken(user)",
              "err": {},
              "uuid": "e1e33cad-d7bf-4d5a-b090-4c46de70e12e",
              "parentUUID": "92585d4b-477d-4340-a75e-14475c320362",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to delte the user details",
              "fullTitle": "delete user should be able to delte the user details",
              "timedOut": false,
              "duration": 1233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const response = await axios.delete(`${baseUrl}` + \"me\",\n        payload\n      );\n      expect(response.status).to.be.equal(200);\n\n      \n    } catch (error) {\n      console.log(error);\n    }",
              "err": {},
              "uuid": "eae45218-ee67-45f9-9932-d8c4f7a26c64",
              "parentUUID": "92585d4b-477d-4340-a75e-14475c320362",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be able to get user details ",
              "fullTitle": "delete user should not be able to get user details ",
              "timedOut": false,
              "duration": 811,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n};\ntry {\n  const response = await axios.get(`${baseUrl}` + \"me\",\n    payload\n  );\n\n  \n} catch (error) {\n    expect(error.response.status).to.be.equal(401);\n//   console.log(error);\n}",
              "err": {},
              "uuid": "726b6c8e-114e-4420-8a39-9748efff77e7",
              "parentUUID": "92585d4b-477d-4340-a75e-14475c320362",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eae45218-ee67-45f9-9932-d8c4f7a26c64",
            "726b6c8e-114e-4420-8a39-9748efff77e7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2044,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e533ac47-0f08-4f6d-87c1-fd2b8e6fc1a8",
          "title": "get uuser test",
          "fullFile": "/Users/testvagrant-1/Documents/api coding challenge/contactlist_apiautomation_assignment/test/user/getUser.spec.js",
          "file": "/test/user/getUser.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Should login and get the bearer token in \"get uuser test\"",
              "fullTitle": "get uuser test \"before all\" hook: Should login and get the bearer token in \"get uuser test\"",
              "timedOut": false,
              "duration": 1241,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await userToken(user)\n// console.log(token);",
              "err": {},
              "uuid": "d40d2fbf-4583-4bd5-adc6-39106ab01547",
              "parentUUID": "e533ac47-0f08-4f6d-87c1-fd2b8e6fc1a8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to get user details ",
              "fullTitle": "get uuser test should be able to get user details ",
              "timedOut": false,
              "duration": 1213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n};\n   \ntry {\n  const response = await axios.get(`${baseUrl}` + \"me\",\n    payload\n  );\n//   console.log(response.data);\n  expect(response.status).to.be.equal(200);\n} catch (error) {\n  console.log(error);\n}",
              "err": {},
              "uuid": "3023d44a-04b1-4ea4-9218-a8d107ce59f8",
              "parentUUID": "e533ac47-0f08-4f6d-87c1-fd2b8e6fc1a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test the name details are correct  ",
              "fullTitle": "get uuser test test the name details are correct  ",
              "timedOut": false,
              "duration": 1228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n};\ntry {\n  const response = await axios.get(`${baseUrl}` + \"me\",\n    payload\n  );\n  expect(response.data.firstName).to.be.equal(user.firstName);\n  \n} catch (error) {\n  console.log(error);\n}",
              "err": {},
              "uuid": "0c2bacad-b75f-4710-a397-c7bab58e7578",
              "parentUUID": "e533ac47-0f08-4f6d-87c1-fd2b8e6fc1a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test the email is correct  ",
              "fullTitle": "get uuser test test the email is correct  ",
              "timedOut": false,
              "duration": 1237,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n};\ntry {\n  const response = await axios.get(`${baseUrl}` + \"me\",\n    payload\n  );\n  expect(response.data.email).to.be.equal(user.email);\n  \n} catch (error) {\n  console.log(error);\n}",
              "err": {},
              "uuid": "cbef6558-96fc-4964-86bb-fca899b4a933",
              "parentUUID": "e533ac47-0f08-4f6d-87c1-fd2b8e6fc1a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3023d44a-04b1-4ea4-9218-a8d107ce59f8",
            "0c2bacad-b75f-4710-a397-c7bab58e7578",
            "cbef6558-96fc-4964-86bb-fca899b4a933"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3678,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2a4b74bc-75df-4418-bc56-b7075da3eb81",
          "title": "test login",
          "fullFile": "/Users/testvagrant-1/Documents/api coding challenge/contactlist_apiautomation_assignment/test/user/login.spec.js",
          "file": "/test/user/login.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Should login and get the bearer token in \"test login\"",
              "fullTitle": "test login \"before all\" hook: Should login and get the bearer token in \"test login\"",
              "timedOut": false,
              "duration": 1225,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await userToken(user)",
              "err": {},
              "uuid": "71a4a66a-222a-40a2-8b64-4680a7b94fac",
              "parentUUID": "2a4b74bc-75df-4418-bc56-b7075da3eb81",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": " should be able able to login ",
              "fullTitle": "test login  should be able able to login ",
              "timedOut": false,
              "duration": 1224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n      const response = await axios.post(`${baseUrl}` + \"login\",\n        loginData\n      );\n    \n    \n      expect(response.status).to.be.equal(200);\n    } catch (error) {\n      console.log(error);\n    }",
              "err": {},
              "uuid": "54befd4e-dec5-4d68-826e-4ac94679baf9",
              "parentUUID": "2a4b74bc-75df-4418-bc56-b7075da3eb81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test the firstname  is correct  ",
              "fullTitle": "test login test the firstname  is correct  ",
              "timedOut": false,
              "duration": 1228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.post(`${baseUrl}` + \"login\",\n    loginData\n  );\n  \n  const firstName = response.data.user.firstName;\n  expect(firstName).to.be.equal(user.firstName);\n  \n} catch (error) {\n  console.log(error);\n}",
              "err": {},
              "uuid": "8bbdac56-f716-4750-b978-a531b35904f6",
              "parentUUID": "2a4b74bc-75df-4418-bc56-b7075da3eb81",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error when enterd wrong email  ",
              "fullTitle": "test login should show error when enterd wrong email  ",
              "timedOut": false,
              "duration": 1080,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const response = await axios.post(`${baseUrl}` + \"login\",\n    wrongloginData\n  );\n  \n  \n} catch (error) {\n    expect(error.response.status).to.be.equal(401);\n\n}",
              "err": {},
              "uuid": "3eb7c884-431c-43d0-845f-bed04e05aafe",
              "parentUUID": "2a4b74bc-75df-4418-bc56-b7075da3eb81",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "54befd4e-dec5-4d68-826e-4ac94679baf9",
            "8bbdac56-f716-4750-b978-a531b35904f6",
            "3eb7c884-431c-43d0-845f-bed04e05aafe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3532,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b6b35adc-0b9e-4911-856b-729e1d36fe37",
          "title": "test login",
          "fullFile": "/Users/testvagrant-1/Documents/api coding challenge/contactlist_apiautomation_assignment/test/user/logout.spec.js",
          "file": "/test/user/logout.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Should login and get the bearer token in \"test login\"",
              "fullTitle": "test login \"before all\" hook: Should login and get the bearer token in \"test login\"",
              "timedOut": false,
              "duration": 1369,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await userToken(user)",
              "err": {},
              "uuid": "f19409fb-1c4e-4a1a-8374-355482874882",
              "parentUUID": "b6b35adc-0b9e-4911-856b-729e1d36fe37",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": " should be able able to login ",
              "fullTitle": "test login  should be able able to login ",
              "timedOut": false,
              "duration": 1234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n      const response = await axios.post(`${baseUrl}` + \"login\",\n        loginData\n      );\n    //   console.log(response.data);\n    \n      expect(response.status).to.be.equal(200);\n    } catch (error) {\n      console.log(error);\n    }",
              "err": {},
              "uuid": "737b6997-8ca0-4e06-908d-c0ea6d084564",
              "parentUUID": "b6b35adc-0b9e-4911-856b-729e1d36fe37",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "737b6997-8ca0-4e06-908d-c0ea6d084564"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1234,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f34c577d-5674-4837-937e-554a7600d10c",
          "title": "test logout",
          "fullFile": "/Users/testvagrant-1/Documents/api coding challenge/contactlist_apiautomation_assignment/test/user/logout.spec.js",
          "file": "/test/user/logout.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": " should be able able to logout ",
              "fullTitle": "test logout  should be able able to logout ",
              "timedOut": false,
              "duration": 1228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      };\n\n   \n    try {\n      const response = await axios.post(`${baseUrl}` + \"logout\",null,\n        payload\n      );\n    //   console.log(response.data);\n    \n      expect(response.status).to.be.equal(200);\n    } catch (error) {\n      console.log(error);\n    }",
              "err": {},
              "uuid": "fba698cd-0f67-4add-9865-fe22dd01edd8",
              "parentUUID": "f34c577d-5674-4837-937e-554a7600d10c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fba698cd-0f67-4add-9865-fe22dd01edd8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1228,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cf78cda2-d63a-45dd-b463-53be3b452124",
          "title": "update user test",
          "fullFile": "/Users/testvagrant-1/Documents/api coding challenge/contactlist_apiautomation_assignment/test/user/updateUser.spec.js",
          "file": "/test/user/updateUser.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Should login and get the bearer token in \"update user test\"",
              "fullTitle": "update user test \"before all\" hook: Should login and get the bearer token in \"update user test\"",
              "timedOut": false,
              "duration": 1222,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await userToken(user)",
              "err": {},
              "uuid": "91811d0c-0868-48ef-a227-2b5c0baec23e",
              "parentUUID": "cf78cda2-d63a-45dd-b463-53be3b452124",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to  update the first name ",
              "fullTitle": "update user test should be able to  update the first name ",
              "timedOut": false,
              "duration": 1235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n};\ntry {\n  const response = await axios.patch(`${baseUrl}` + \"me\",update,\n    payload\n  );\n  expect(response.status).to.be.equal(200);\n  \n} catch (error) {\n  console.log(error);\n}",
              "err": {},
              "uuid": "2c2f5bee-cfcd-4d47-8ce7-169ae482b4d2",
              "parentUUID": "cf78cda2-d63a-45dd-b463-53be3b452124",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "test the updated name  is correct  ",
              "fullTitle": "update user test test the updated name  is correct  ",
              "timedOut": false,
              "duration": 1221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n};\ntry {\n  const response = await axios.patch(`${baseUrl}` + \"me\",update,\n    payload\n  );\n  expect(response.data.firstName).to.be.equal(updatedName);\n  \n} catch (error) {\n  console.log(error);\n}",
              "err": {},
              "uuid": "8351e63b-d2f5-4dc7-aaba-3d26f6222cf4",
              "parentUUID": "cf78cda2-d63a-45dd-b463-53be3b452124",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c2f5bee-cfcd-4d47-8ce7-169ae482b4d2",
            "8351e63b-d2f5-4dc7-aaba-3d26f6222cf4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2456,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f1bc47c0-6d51-44d7-b7ce-12a1b558dc98",
          "title": "test login",
          "fullFile": "/Users/testvagrant-1/Documents/api coding challenge/contactlist_apiautomation_assignment/test/contact/addContact.spec.js",
          "file": "/test/contact/addContact.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Should login and get the bearer token in \"test login\"",
              "fullTitle": "test login \"before all\" hook: Should login and get the bearer token in \"test login\"",
              "timedOut": false,
              "duration": 1231,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await userTokenGenerator()",
              "err": {},
              "uuid": "dfce8755-1142-4f14-b119-af0c2e3d0a9c",
              "parentUUID": "f1bc47c0-6d51-44d7-b7ce-12a1b558dc98",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to create contact  details ",
              "fullTitle": "test login should be able to create contact  details ",
              "timedOut": false,
              "duration": 1051,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n};\ntry {\n  const response = await axios.post(`${baseUrl}` ,contactdata,\n    payload\n  );\n  \n  expect(response.status).to.be.equal(201);\n} catch (error) {\n  console.log(error);\n}",
              "err": {},
              "uuid": "bb166696-d442-4c88-90fd-c544c517ce6c",
              "parentUUID": "f1bc47c0-6d51-44d7-b7ce-12a1b558dc98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check that the contact details are correct  ",
              "fullTitle": "test login check that the contact details are correct  ",
              "timedOut": false,
              "duration": 1402,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n};\ntry {\n  const response = await axios.post(`${baseUrl}` ,contactdata,\n    payload\n  );\n  \n  expect(response.data.firstName).to.be.equal(contactdata.firstName);\n} catch (error) {\n  console.log(error);\n}",
              "err": {},
              "uuid": "9940dd03-0e00-4c2b-8f1a-82e8aa2fe36c",
              "parentUUID": "f1bc47c0-6d51-44d7-b7ce-12a1b558dc98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check that the contact details are correct  ",
              "fullTitle": "test login check that the contact details are correct  ",
              "timedOut": false,
              "duration": 1229,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n};\ntry {\n  const response = await axios.post(`${baseUrl}` ,contactdata,\n    payload\n  );\n  \n  expect(response.data.lastName).to.be.equal(contactdata.lastName);\n} catch (error) {\n  console.log(error);\n}",
              "err": {},
              "uuid": "f63d0541-2b40-4e8d-9be1-cd96a6b917fe",
              "parentUUID": "f1bc47c0-6d51-44d7-b7ce-12a1b558dc98",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bb166696-d442-4c88-90fd-c544c517ce6c",
            "9940dd03-0e00-4c2b-8f1a-82e8aa2fe36c",
            "f63d0541-2b40-4e8d-9be1-cd96a6b917fe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3682,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b85c1be5-0a22-4c92-8c4e-9ef4f8f1e81a",
          "title": "test login",
          "fullFile": "/Users/testvagrant-1/Documents/api coding challenge/contactlist_apiautomation_assignment/test/contact/deleteContact.js",
          "file": "/test/contact/deleteContact.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Should login and get the bearer token in \"test login\"",
              "fullTitle": "test login \"before all\" hook: Should login and get the bearer token in \"test login\"",
              "timedOut": false,
              "duration": 1240,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await userTokenGenerator()",
              "err": {},
              "uuid": "2ba664fb-6f35-420b-a177-70da5f387521",
              "parentUUID": "b85c1be5-0a22-4c92-8c4e-9ef4f8f1e81a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to get contact id  ",
              "fullTitle": "test login should be able to get contact id  ",
              "timedOut": false,
              "duration": 1633,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  try {\n    const response = await axios.get(`${baseUrl}` ,\n      payload\n    );\n    \n     id = (response.data[0]._id);\n    expect(response.status).to.be.equal(200);\n  } catch (error) {\n    console.log(error);\n  }",
              "err": {},
              "uuid": "dd87cc8e-1fc1-4131-b1a2-1e3c08ea2302",
              "parentUUID": "b85c1be5-0a22-4c92-8c4e-9ef4f8f1e81a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dd87cc8e-1fc1-4131-b1a2-1e3c08ea2302"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1633,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0a1e64e8-8fdd-4d61-8e02-13af0731b186",
          "title": "test  delete contact ",
          "fullFile": "/Users/testvagrant-1/Documents/api coding challenge/contactlist_apiautomation_assignment/test/contact/deleteContact.js",
          "file": "/test/contact/deleteContact.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to delte the contact ",
              "fullTitle": "test  delete contact  should be able to delte the contact ",
              "timedOut": false,
              "duration": 1217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  try {\n    const response = await axios.delete(`${baseUrl}${id}`,\n      payload\n    );\n    \n    expect(response.status).to.be.equal(200);\n  } catch (error) {\n    console.log(error);\n  }",
              "err": {},
              "uuid": "53a4e2d3-4952-4048-adff-f752c3db8b9d",
              "parentUUID": "0a1e64e8-8fdd-4d61-8e02-13af0731b186",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should shows error when try to delte the same contact ",
              "fullTitle": "test  delete contact  should shows error when try to delte the same contact ",
              "timedOut": false,
              "duration": 1226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  try {\n    const response = await axios.delete(`${baseUrl}${id}`,\n      payload\n    );\n    \n    \n  } catch (error) {\n     expect(error.response.status).to.be.equal(404);\n    \n  }",
              "err": {},
              "uuid": "f85eb2df-fe38-4886-833c-8123580bcd1e",
              "parentUUID": "0a1e64e8-8fdd-4d61-8e02-13af0731b186",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "53a4e2d3-4952-4048-adff-f752c3db8b9d",
            "f85eb2df-fe38-4886-833c-8123580bcd1e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2443,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "39465459-11c3-4288-85e7-d4dced0e1a6e",
          "title": "test get contact details",
          "fullFile": "/Users/testvagrant-1/Documents/api coding challenge/contactlist_apiautomation_assignment/test/contact/getContact.js",
          "file": "/test/contact/getContact.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Should login and get the bearer token in \"test get contact details\"",
              "fullTitle": "test get contact details \"before all\" hook: Should login and get the bearer token in \"test get contact details\"",
              "timedOut": false,
              "duration": 1229,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await userTokenGenerator()",
              "err": {},
              "uuid": "a1c1c5b7-2986-4db3-8cf0-3f37c39d0d15",
              "parentUUID": "39465459-11c3-4288-85e7-d4dced0e1a6e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to get contact id  ",
              "fullTitle": "test get contact details should be able to get contact id  ",
              "timedOut": false,
              "duration": 1636,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  try {\n    const response = await axios.get(`${baseUrl}` ,\n      payload\n    );\n    \n     id = (response.data[2]._id);\n    expect(response.status).to.be.equal(200);\n  } catch (error) {\n    console.log(error);\n  }",
              "err": {},
              "uuid": "79a19f70-8433-49fb-bd1a-69e0a1a38b51",
              "parentUUID": "39465459-11c3-4288-85e7-d4dced0e1a6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "contact details should not be empty ",
              "fullTitle": "test get contact details contact details should not be empty ",
              "timedOut": false,
              "duration": 1228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n};\ntry {\n  const response = await axios.get(\n    `${baseUrl}${id}` ,\n    payload\n  );\n  \n  expect(response.data).not.to.be.empty;\n} catch (error) {\n   console.log(error);\n}",
              "err": {},
              "uuid": "f15855b9-e227-4bda-b980-d3ea655656df",
              "parentUUID": "39465459-11c3-4288-85e7-d4dced0e1a6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to get contact details ",
              "fullTitle": "test get contact details should be able to get contact details ",
              "timedOut": false,
              "duration": 1228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  headers: {\n    Authorization: `Bearer ${token}`,\n  },\n};\ntry {\n  const response = await axios.get(\n    `${baseUrl}${id}`,\n    payload\n  );\n  \n  expect(response.status).to.be.equal(200);\n} catch (error) {\n    console.log(error);\n}",
              "err": {},
              "uuid": "dbee8fa4-c8cc-4ae6-8733-cedfea290466",
              "parentUUID": "39465459-11c3-4288-85e7-d4dced0e1a6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "79a19f70-8433-49fb-bd1a-69e0a1a38b51",
            "f15855b9-e227-4bda-b980-d3ea655656df",
            "dbee8fa4-c8cc-4ae6-8733-cedfea290466"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4092,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "caf55ba3-48e3-47f6-b9e7-ebfd80035598",
          "title": "test  contactlist ",
          "fullFile": "/Users/testvagrant-1/Documents/api coding challenge/contactlist_apiautomation_assignment/test/contact/getContactlist.js",
          "file": "/test/contact/getContactlist.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Should login and get the bearer token in \"test  contactlist \"",
              "fullTitle": "test  contactlist  \"before all\" hook: Should login and get the bearer token in \"test  contactlist \"",
              "timedOut": false,
              "duration": 1229,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await userTokenGenerator()",
              "err": {},
              "uuid": "44c6be69-3003-4afc-9475-ba1e7573d597",
              "parentUUID": "caf55ba3-48e3-47f6-b9e7-ebfd80035598",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "contact list should not be empty ",
              "fullTitle": "test  contactlist  contact list should not be empty ",
              "timedOut": false,
              "duration": 1639,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  try {\n    const response = await axios.get(`${baseUrl}` ,\n      payload\n    );\n    \n    expect(response.data).not.to.be.empty;\n  } catch (error) {\n    console.log(error);\n  }",
              "err": {},
              "uuid": "61915a42-30e9-4d42-b9a1-3d6f8e1ed314",
              "parentUUID": "caf55ba3-48e3-47f6-b9e7-ebfd80035598",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to get contact list  ",
              "fullTitle": "test  contactlist  should be able to get contact list  ",
              "timedOut": false,
              "duration": 1633,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  try {\n    const response = await axios.get(`${baseUrl}` ,\n      payload\n    );\n   \n    expect(response.status).to.be.equal(200);\n  } catch (error) {\n    console.log(error);\n  }",
              "err": {},
              "uuid": "78c15d32-f8ae-4498-93e7-824bcda4d895",
              "parentUUID": "caf55ba3-48e3-47f6-b9e7-ebfd80035598",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "61915a42-30e9-4d42-b9a1-3d6f8e1ed314",
            "78c15d32-f8ae-4498-93e7-824bcda4d895"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3272,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "68b9469d-f660-469a-9e8c-3b8b8fa7835c",
          "title": "should be able to update the  details",
          "fullFile": "/Users/testvagrant-1/Documents/api coding challenge/contactlist_apiautomation_assignment/test/contact/updateContact.js",
          "file": "/test/contact/updateContact.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Should login and get the bearer token in \"should be able to update the  details\"",
              "fullTitle": "should be able to update the  details \"before all\" hook: Should login and get the bearer token in \"should be able to update the  details\"",
              "timedOut": false,
              "duration": 1227,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await userTokenGenerator()",
              "err": {},
              "uuid": "9b258d5f-fffa-492e-b7ca-76dd1d8f6088",
              "parentUUID": "68b9469d-f660-469a-9e8c-3b8b8fa7835c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to get contact id  ",
              "fullTitle": "should be able to update the  details should be able to get contact id  ",
              "timedOut": false,
              "duration": 1647,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  try {\n    const response = await axios.get(`${baseUrl}` ,\n      payload\n    );\n    \n     id = (response.data[3]._id);\n    expect(response.status).to.be.equal(200);\n  } catch (error) {\n    console.log(error);\n  }",
              "err": {},
              "uuid": "cb48d7a1-48a1-4ba6-b9b7-d5c49b91ca3f",
              "parentUUID": "68b9469d-f660-469a-9e8c-3b8b8fa7835c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to update the first name  ",
              "fullTitle": "should be able to update the  details should be able to update the first name  ",
              "timedOut": false,
              "duration": 1131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  try {\n    const response = await axios.patch(`${baseUrl}${id}`,updatedphone,\n      payload\n    );\n    \n    expect(response.data.phone).to.be.equal(updatedphone.phone);\n  } catch (error) {\n    console.log(error);\n  }",
              "err": {},
              "uuid": "686a5d6f-ffdc-444b-99da-77cf3612873a",
              "parentUUID": "68b9469d-f660-469a-9e8c-3b8b8fa7835c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "contact details should not be empty ",
              "fullTitle": "should be able to update the  details contact details should not be empty ",
              "timedOut": false,
              "duration": 1111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  try {\n    const response = await axios.patch(`${baseUrl}${id}`,updatedfirstname,\n      payload\n    );\n    \n    expect(response.status).to.be.equal(200);\n  } catch (error) {\n    console.log(error);\n  }",
              "err": {},
              "uuid": "513ae454-8714-4a4d-9d31-c3f3b914baf0",
              "parentUUID": "68b9469d-f660-469a-9e8c-3b8b8fa7835c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb48d7a1-48a1-4ba6-b9b7-d5c49b91ca3f",
            "686a5d6f-ffdc-444b-99da-77cf3612873a",
            "513ae454-8714-4a4d-9d31-c3f3b914baf0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3889,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}